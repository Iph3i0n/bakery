<s:meta name="o-offcanvas">
  A offcanvas dialogue to be triggered by another element on the screen.
  <attr name="trigger">
    A CSS selector to listen to for opening the dialogue. Will listen for clicks
    of any elements matching the selector.
  </attr>
  <attr name="size" type="size" default="medium">
    The size of the modal on the screen.
  </attr>
  <attr name="path" type="string" optional>
    If set then the modal will be treated like a `u-router` and show if the
    route matches. In this case then the modal will replace the state when
    closed so make sure that it only routes modal specific things.
  </attr>
  <attr name="open" type="boolean">
    If set then overrides all other behaviour to open the modal.
  </attr>

  <event name="close" type="OffcanvasCloseEvent">
    When the user closes the offcanvas. Good for frameworks.
  </event>

  <slot name="title">The top of the offcanvas.</slot>
  <slot name="footer">
    The bottom of the offcanvas, will be hidden if empty.
  </slot>
  <aria role="dialog" />
  <import use="On" from="../events.ts" />
  <import use="unsafe_import" from="../fetch-resources.ts" />
  <import use="on_key_handler" from="../events/keyboard.ts" />
  <base use="Router" from="../base-classes/router.ts" default />
</s:meta>

<script>
  let open = false;
  let width = "0";
  let has_footer = false;

  unsafe_import("https://cdn.jsdelivr.net/npm/wicg-inert/dist/inert.min.js");

  switch (self.size) {
    case "small":
      width = "15em";
      break;
    case "medium":
      width = "30rem";
      break;
    case "large":
      width = "50rem";
      break;
  }

  function on_footer(e) {
    has_footer = e.currentTarget.assignedNodes().length > 0;
  }

  self.addEventListener(LoadedEvent.Key, () => {
    if (self.trigger) {
      const off_click = On("click", self.trigger, () => {
        if (typeof self === "undefined") {
          off_click();
          return;
        }

        open = true;
        self.dispatchEvent(new ShouldRender());
      });
    }
  });

  self.addEventListener(RenderEvent.Key, () => {
    self.inert = !is_open();
  });

  function close() {
    self.dispatchEvent(new CustomEvent("close"));
    if (self.trigger) {
      open = false;
    } else if (self.path) {
      const target = window.location.pathname
        .split("/")
        .slice(0, self.use_context((c) => c.routing_data?.used ?? 0) + 1)
        .filter((p) => p)
        .join("/");
      self.Replace("/" + target);
    }
  }

  const on_close_enter = on_key_handler({
    Enter: () => close(),
  });

  function is_open() {
    if (self.open) return true;
    if (self.trigger) return open;
    if (self.path) return self.Matches;
    return false;
  }
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");

  @insert ../styles/overlay.pss;

  @if is_open() {
    @insert ../styles/overlay-open.pss;
  }

  .container {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    overflow: hidden;
    max-width: 100%;
    theme.transition("slow", "max-width");
  }

  @if !is_open() {
    .container {
      max-width: 0 !important;
      border: none !important;
    }
  }

  .modal {
    width: ":width";
    height: 100%;
    box-sizing: border-box;
  }

  @media ":spec.screen_sizes.md.query" {
    .container {
      theme.border("body", undefined, "right");
      max-width: ":width";
    }
  }

  @if !has_footer {
    .footer {
      display: none;
    }
  }

  @insert ../styles/custom-scrollbar.pss;
</style>

<div class="overlay" on:click="close"></div>
<div class="container">
  <div class="modal">
    <div class="title">
      <slot name="title"></slot>
      <div
        class="close-button"
        tabindex="0"
        on:click="close"
        on:keyup="on_close_enter"
      >
        <t-icon name="close" colour="body" size="body_large" text></t-icon>
      </div>
    </div>
    <div class="body scrollable">
      <slot></slot>
    </div>
    <div class="footer">
      <slot name="footer" on:slotchange="on_footer"></slot>
    </div>
  </div>
</div>
