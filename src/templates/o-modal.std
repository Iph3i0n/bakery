<meta name="o-modal">
  A modal dialogue to be triggered by another element on the screen.
  <attr name="trigger" optional>
    A CSS selector to listen to for opening the dialogue.
    Will listen for clicks of any elements matching the selector.
  </attr>
  <attr name="size" type="size" default="medium">
    The size of the modal on the screen.
  </attr>
  <attr name="path" type="string" optional>
    If set then the modal will be treated like a `u-router` and show
    if the route matches. In this case then the modal will replace the
    state when closed so make sure that it only routes modal specific things.
  </attr>

  <slot name="title">The top of the modal.</slot>
  <slot name="footer">The bottom of the modal, will be hidden if empty.</slot>
  <aria role="dialog" />
  <import use="On" from="../events.ts" />
  <base use="Router" from="../router.ts" default />
</meta>

<script>
  let open = false;
  let width = "0";
  let height = "0";
  let has_footer = false;

  switch (self.props.size) {
    case "small":
      height = "12rem";
      width = "15rem";
      break;
    case "medium":
      height = "25rem";
      width = "30rem";
      break;
    case "large":
      height = "40rem";
      width = "50rem";
      break;
  }

  function close() {
    if (self.props.trigger) {
      open = false;
    } else {
      const target = window.location.pathname.split("/").slice(0, self.data.used + 1).filter(p => p).join("/");
      self.Replace("/" + target);
    }
  }

  function is_open() {
    if (self.props.trigger) return open;
    else return self.Matches;
  }

  function on_footer(e) {
    has_footer = e.currentTarget.assignedNodes().length > 0;
  }

  self.addEventListener(LoadedEvent.Key, () => {
    if (self.props.trigger) {
      const off_click = On("click", self.props.trigger, () => {
        if (typeof self === "undefined") {
          off_click();
          return;
        }

        open = true;
        self.dispatchEvent(new ShouldRender());
      });
    }

    const slot = self.root.querySelector("slot[name=footer]");
    slot.addEventListener("slotchange", on_footer);
  });
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");

  @insert ../styles/overlay.pss;

  @if is_open() {
    @insert ../styles/overlay-open.pss;
  }

  .container {
    display: flex;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    margin: auto;
    max-width: ":width";
    max-height: ":height";
    width: 100%;
    height: 100%;
  }

  @insert ../styles/custom-scrollbar.pss;

  .modal {
    transform: translateY(0);
    theme.transition("slow", "transform");
    theme.border("body");
    theme.margin("small_block");
    width: 100%;
    height: 100%;
  }

  @if !is_open() {
    .modal {
      transform: translateY(-10px);
    }
  }

  @if !has_footer {
    .footer {
      display: none;
    }
  }
</style>

<div class="overlay" on:click="close"></div>
<div class="container">
  <div class="modal">
    <div class="title">
      <slot name="title"></slot>
      <div class="close-button" on:click="close">
        <t-icon name="close" colour="body" size="body_large" text></t-icon>
      </div>
    </div>
    <div class="body scrollable">
      <slot></slot>
    </div>
    <div class="footer">
      <slot name="footer"></slot>
    </div>
  </div>
</div>
