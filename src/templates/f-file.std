<s:meta name="f-file">
  An upload box for one or more files. Must be placed within a `form` tag.
  <attr name="disabled" type="boolean">If set then the field is readonly.</attr>
  <attr name="name">
    The name of the value field in the form data. Should be unique.
  </attr>
  <attr name="required" type="boolean">
    If set then the form will not be submittable until the element field a
    value.
  </attr>
  <attr name="multiple" type="boolean">
    If set then multiple files may be uploaded. If not then only one file may be
    uploaded.
  </attr>
  <attr name="accept" type="string" default="*">
    The accepted mime types. Uses the same schema as the HTML input element.
  </attr>
  <member name="value" type="string | File | File[] | boolean | undefined">
    The value of the element. What is submitted.
  </member>
  <event name="ValueChanged" type="FileValueChangedEvent">
    Fired when the input value is changed. Does not fire if the value changes
    because the `prefill` value changes.
    <key name="Value" type="string | boolean | File | File[] | undefined">
      The current value of the form element.
    </key>
    <key name="Name" type="string">The name of the input.</key>
  </event>
  <slot>The label text</slot>
  <slot name="help">The small help text at the bottom of the input.</slot>
  <slot name="empty">
    The error text for if the slot is empty and required is true.
  </slot>
  <slot name="invalid">
    The error text for if validate is set and the RegExp does not match
  </slot>
  <base use="FormElement" from="../base-classes/form" default />
  <import use="c" from="../html/classes" default />
  <import use="slotted" from="../toggleable-slot" default />
  <import use="link_css" from="../fetch-resources" />
  <import use="on_key_handler" from="../events/keyboard" />
  <import use="get_file" from="../html/file" />
  <import use="ConvertSize" from="../deps" />
  <aria role="input" />
  <form />
</s:meta>

<script>
  let preview = "";
  let dragging = false;
  const slot = slotted();

  /** @type {Array<File>} */
  let files = [];

  /** @param {Array<File>} input */
  function update_value(input) {
    if (self.multiple) {
      files = [...files, ...input];
      self.value = files;
    } else {
      files = [input[0]];
      self.value = files[0];
    }
  }

  $on_drop: {
    event.preventDefault();
    update_value([...event.dataTransfer.files]);
  }

  $on_dragover: {
    event.preventDefault();
    const old = dragging;
    dragging = true;
    if (old !== dragging) self.should_render();
    clear();
  }

  $on_click: {
    update_value([await get_file(self.accept)]);
  }

  function debounce(func, timeout = 300) {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        func.apply(this, args);
      }, timeout);
    };
  }

  const clear = debounce(() => {
    dragging = false;
    self.dispatchEvent(new ShouldRender());
  });

  self.addEventListener(
    "keydown",
    on_key_handler({
      Enter: async () => {
        update_value([await get_file(self.accept)]);
      },
    })
  );

  function remove(file) {
    /** @param {Event} e */
    return (e) => {
      e.preventDefault();
      e.stopPropagation();
      files = files.filter((f) => f !== file);

      if (self.multiple) {
        self.value = files;
      } else {
        self.value = files[0];
      }
    };
  }
</script>

<style>
  @js const theme = require("../theme");
  @js const spec = require("../spec");
  @insert ../styles/input.pss;

  :host {
    cursor: pointer;
  }

  .label {
    overflow: hidden;
  }

  .textarea-label {
    display: block;
    theme.padding("small_block");
    theme.colour("body");
    theme.text("body", "no-margin");
    theme.border("body", "contrast", "bottom");
    border-top-left-radius: ":spec.borders.body.radius";
    border-top-right-radius: ":spec.borders.body.radius";
  }

  span:not(.caret) {
    animation-play-state: paused;
  }

  .droparea {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    theme.colour("surface");
    theme.transition("slow", "background-color");
  }

  @if files.length === 0 {
    .droparea {
      min-height: 4rem;
    }
  }

  @if dragging {
    .droparea {
      theme.colour("body");
    }
  }

  .droparea t-icon {
    opacity: 0.7;
  }

  .droparea .file-display t-icon {
    opacity: 1;
  }

  .file-display {
    theme.border("body", undefined, "bottom");
    display: flex;
    align-items: center;
    justify-content: flex-start;
    theme.text("body", "no-margin");
    flex: 1;
    theme.padding("block");
    width: 100%;
    box-sizing: border-box;
  }

  .file-display:last-child {
    border-bottom: none;
  }

  .file-name {
    theme.margin("block", "left", "right");
    flex: 1;
  }

  .delete-button {
    cursor: pointer;
    theme.border("small");
    theme.colour("body");
    theme.padding("super_small");
    theme.transition("fast", "color", "background-color");
  }

  .delete-button:hover,
  .delete-button:focus {
    theme.colour("body", 0.9);
  }

  .size {
    theme.text("small", "no-margin");
    opacity: 0.7;
    theme.margin("small_block", "left", "right");
  }
</style>

<div class=":self.label_class">
  <div class="textarea-label">
    <slot></slot>
  </div>
  <div class="droparea">
    <s:for subject=":files" key="file">
      <div class="file-display">
        <t-icon name="file" colour="surface" size="body" text></t-icon>
        <div class="file-name">
          <s:text use=":file.name" />
          <span class="size">
            <s:text use=":ConvertSize(file.size, { accuracy: 2 })" />
          </span>
        </div>
        <button type="button" class="delete-button" on:click="remove(file)">
          <t-icon name="delete-bin" colour="surface" size="body" text></t-icon>
        </button>
      </div>
    </s:for>
    <s:if check=":files.length === 0">
      <t-icon name="upload-2" colour="body" size="h1" text></t-icon>
    </s:if>
  </div>
</div>
<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !slot.has_children])">
    <slot name="help" on:slotchange="slot.on_change"></slot>
  </div>
</s:if>
