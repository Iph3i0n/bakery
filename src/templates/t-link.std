<s:meta name="t-link">
  A styled link for usage around the site.
  <attr name="href" optional>
    The URL to send the user to if the button is being used as a link. If not
    provided then the link will simply function as a button.
  </attr>
  <attr name="target" type="target" optional>
    The standard target from an anchor element.
  </attr>
  <attr name="private" type="boolean">
    If set then the link will be treated as external. This means that
    `rel="noreferrer noopener"` will be applied.
  </attr>
  <attr name="block" type="boolean">
    If set then the link will be displayed as a block rather than an inline
    block.
  </attr>
  <attr name="spa" type="boolean">
    If set then the link will use a SPA push to navigate rather than loading the
    page. Will be ignored if `target` or `private` are set.
  </attr>
  <attr name="replace" type="boolean">
    Only used if `spa` is set. Will make the link replace the state rather than
    push. Useful if you don't want the back button to keep people on the page.
  </attr>
  <aria role="button" />
  <base use="UrlBuilder" from="../base-classes/router.ts" />
  <import use="Router" from="../base-classes/router.ts" default />
  <import use="on_key_handler" from="../events/keyboard.ts" />
</s:meta>

<script>
  self.tabIndex = 0;

  function activate() {
    if (!self.href) return;
    const url = self.Render(self.href);
    if (self.target)
      window.open(url, self.target, self.private ? "noreferrer" : undefined);
    else if (self.spa)
      if (self.replace) Router.Replace(url);
      else Router.Push(url);
    else window.location.href = url;
  }

  self.addEventListener("click", activate);

  self.addEventListener(
    "keyup",
    on_key_handler({
      Enter: () => {
        self.dispatchEvent(new MouseEvent("click", { bubbles: true }));
        activate();
      },
    })
  );
</script>

<style>
  @js const theme = require("../theme.ts");

  :host {
    display: ":self.block ? 'block' : 'inline-block'";
    theme.text("body", self.block ? undefined : "no-margin");
    cursor: pointer;
    theme.border("small");
    theme.transition("fast", "color", "background-color", "box-shadow");
    theme.textcolour("primary");
    text-decoration: underline;
  }

  @if self.block {
    :host {
      theme.padding("small_block");
      theme.border("body", "contrast", "bottom");
      theme.colour("body");
      text-decoration: none;
    }
  }

  :host(:hover),
  :host(:focus) {
    outline: none;
    theme.colour("primary", 1);
    text-decoration: none;
  }

  @if !self.block {
    :host(:hover),
    :host(:focus) {
      theme.outline("primary", 1);
    }
  }
</style>

<slot></slot>
