<script>
  import FormElement from "../form-element.ts";
  import c from "../classes.ts";
  import slotted from "../toggleable-slot.ts";
  import { link_css } from "../fetch-resources.ts";

  export const name = "f-textarea";
  export const props = {
    default: "",
    disabled: false,
    name: undefined,
    type: "text",
    required: false,
    validate: undefined,
  };
  export const base = FormElement;
  export const form = true;
  export const aria = { Role: "input" };

  link_css(
    "https://cdn.rawgit.com/noppa/text-security/master/dist/text-security.css",
    self
  );

  const slot = slotted();
  const textarea = CreateRef();

  self.addEventListener("focus", () => {
    textarea.current.focus();
  });

  self.addEventListener(RenderEvent.Key, () => {
    textarea.current.innerHTML = self.value ?? "";
  });

  function update_value() {
    self.value = textarea.current.innerText;
  }
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");
  @insert ../styles/input.pss;

  .textarea-label {
    display: block;
    theme.padding("small_block");
    theme.colour("body");
    theme.text("body", "no-margin");
    theme.border("body", "contrast", "bottom");
    border-top-left-radius: ":spec.borders.body.radius";
    border-top-right-radius: ":spec.borders.body.radius";
  }

  .content {
    min-height: 6rem;
    theme.text("body", "no-margin");
    theme.padding("small_block");
  }

  .content.sensitive {
    font-family: "text-security-disc";
    -webkit-text-security: disc;
  }

  .content:focus {
    outline: none;
  }

  span:not(.caret) {
    animation-play-state: paused;
  }
</style>

<div class=":self.label_class">
  <div class="textarea-label">
    <slot></slot>
  </div>
  <div
    class=":c('content', ['sensitive', self.props.sensitive])"
    contenteditable="true"
    s:ref="textarea"
    on:blur="update_value"
    s:vdom="ignore"
    inputmode=":self.props.type ?? 'text'"
  >
    <s:text use=":self.value ?? ''"></s:text>
  </div>
</div>
<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !slot.has_children])">
    <slot name="help" on:slotchange="slot.on_change"></slot>
  </div>
</s:if>
