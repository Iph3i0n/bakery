<s:meta name="f-singleselect">
  A list of items, of which the user can select a single item. Must be placed
  within a `form` tag.
  <attr name="prefill" optional>The default selected item.</attr>
  <attr name="disabled" type="boolean">If set then the field is readonly.</attr>
  <attr name="name">
    The name of the value field in the form data. Should be unique.
  </attr>
  <attr name="required" type="boolean">
    If set then the form will not be submittable until the element field has a
    value.
  </attr>
  <attr name="validate" optional>
    A RegExp string used to evaluate the input. If there are no matches then the
    field will be considered invalid and the form will not be submittable.
  </attr>
  <event name="ValueChanged" type="SingleSelectValueChangedEvent">
    Fired when the input value is changed. Does not fire if the value changes
    because the `prefill` value changes.
    <key name="Value" type="string | boolean | File | undefined">
      The current value of the form element.
    </key>
  </event>
  <slot>The options for select. Should be an `option` element.</slot>
  <slot name="label">The label for the input</slot>
  <slot name="help">The small help text at the bottom of the input.</slot>
  <slot name="empty">
    The error text for if the slot is empty and required is true.
  </slot>
  <slot name="invalid">
    The error text for if validate is set and the RegExp does not match
  </slot>
  <base use="FormElement" from="../base-classes/form.ts" default />
  <import use="c" from="../html/classes.ts" default />
  <import use="slotted" from="../toggleable-slot.ts" default />
  <import use="options" from="../options.ts" default />
  <import use="on_key_handler" from="../events/keyboard.ts" />
  <aria role="select" />
  <form />
</s:meta>

<script>
  const items = options();

  const slot = slotted();

  function toggle(option) {
    return () => {
      self.value = option.value;
    };
  }

  function active(option) {
    return self.value === option.value;
  }

  let open = "";
  self.addEventListener(
    "keydown",
    on_key_handler({
      Enter: () => {
        toggle({ value: open })();
      },
      ArrowUp: () => {
        const open_index = items.data.findIndex((i) => i.value === open);
        const next_index = Math.max(0, open_index - 1);
        open = items.data[next_index].value;
        self.dispatchEvent(new ShouldRender());
      },
      ArrowDown: () => {
        const open_index = items.data.findIndex((i) => i.value === open);
        const next_index = Math.min(items.data.length - 1, open_index + 1);
        open = items.data[next_index].value;
        self.dispatchEvent(new ShouldRender());
      },
    })
  );

  self.addEventListener("blur", () => {
    open = "";
    self.dispatchEvent(new ShouldRender());
  });
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");
  @insert ../styles/checklist-select.pss;

  .item .toggle {
    border-radius: 1em !important;
  }

  .item t-icon {
    position: relative;
    left: 0.5px;
  }
</style>

<div style="display: none">
  <slot on:slotchange="items.on_change"></slot>
</div>

<div class=":self.label_class">
  <div class="label-text">
    <slot name="label"></slot>
  </div>

  <div class="content scrollable">
    <s:for subject=":items.data" key="option">
      <s:if check=":!option.disabled">
        <div
          class=":c('item', 'option', ['selected', active(option)], ['hover', open === option.value])"
          on:click="toggle(option)"
        >
          <span class="toggle">
            <t-icon name="radio-button" colour="primary" fill></t-icon>
          </span>
          <s:text use=":option.text"></s:text>
        </div>
      </s:if>
      <s:if check=":option.disabled">
        <div class=":c('item', 'disabled', ['selected', active(option)])">
          <span class="toggle">
            <t-icon name="radio-button" colour="primary" fill></t-icon>
          </span>
          <s:text use=":option.text"></s:text>
        </div>
      </s:if>
    </s:for>
  </div>
</div>

<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !slot.has_children])">
    <slot name="help" on:slotchange="slot.on_change"></slot>
  </div>
</s:if>
