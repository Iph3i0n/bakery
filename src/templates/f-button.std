<script>
  import { FindForm } from "../form-element.ts";
  import * as theme from "../theme.ts";

  export const name = "f-button";
  export const props = {
    colour: "primary",
    type: undefined,
    href: undefined,
    target: undefined,
    private: false,
  };
  export const aria = { Role: "button" };

  self.tabIndex = 0;

  self.addEventListener(LoadedEvent.Key, () => {
    self.addEventListener("click", () => {
      if (self.props.type === "button") return;
      else if (self.props.type === "submit") {
        const form = FindForm(self);
        if (!form) throw new Error("Cannot use a submit outside of a form");
        form.requestSubmit();
      } else if (self.props.href)
        if (self.props.target)
          window.open(
            self.props.href,
            self.props.target,
            self.props.private ? "noreferrer" : undefined
          );
        else window.location.href = self.props.href;
    });

    const observer = new MutationObserver(() => {
      if (!self) {
        observer.disconnect();
        return;
      }

      self.dispatchEvent(new ShouldRender());
    });

    observer.observe(self.parentElement, { childList: true });
  });

  const is_last_button = () => {
    const next = self.nextSibling;
    if (next instanceof Text && next.wholeText.trim()) return false;
    return self.nextElementSibling?.tagName !== "F-BUTTON";
  };
  const is_first_button = () => {
    const next = self.previousSibling;
    if (next instanceof Text && next.wholeText.trim()) return false;
    return self.previousElementSibling?.tagName !== "F-BUTTON";
  };

  self.addEventListener(RenderEvent.Key, () => {
    if (is_last_button()) return;
    while (self.nextSibling instanceof Text) {
      self.nextSibling.remove();
    }
  });
</script>

<style>
  @js const c = self.props.colour ?? 'primary';
  :host {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5em;
    theme.colour(c);
    theme.padding("small_block");
    theme.border("body");
    theme.text("body", "no-margin");
    -webkit-user-select: none;
    user-select: none;
    cursor: pointer;
    text-align: center;
    box-shadow: none;
    theme.transition("fast", "background-color", "border-color", "box-shadow");
  }

  :host(:hover),
  :host(:focus) {
    outline: none;
    theme.colour(c, 1.1);
    theme.border("body", "contrast");
    theme.shadow("small");
  }

  @if !is_last_button() {
    :host {
      border-right: none !important;
      border-top-right-radius: 0 !important;
      border-bottom-right-radius: 0 !important;
      box-shadow: none !important;
    }
  }

  @if !is_first_button() {
    :host {
      border-left: none !important;
      border-top-left-radius: 0 !important;
      border-bottom-left-radius: 0 !important;
      box-shadow: none !important;
    }
  }
</style>

<slot></slot>
