<s:meta name="o-dropdown">
  A simple dropdown that can be triggered by a separate element on the page. It
  is automatically position below its target.
  <attr name="target">
    A CSS selector for the desired target. It will listen for click events from
    any element matching that selector and will position below the one that is
    clicked.
  </attr>
  <attr name="width">
    The width of the dropdown menu. If unset then the width of the target will
    be used. Should be a CSS width.
  </attr>
  <attr name="height" default="12rem">The max height of the drop down.</attr>
  <attr name="scrollable" type="boolean">
    If true then the dropdown will have a scroll bar when there are too many
    elements within.
  </attr>
  <import use="c" from="../html/classes" default />
  <import use="unsafe_import" from="../fetch-resources" />
  <import use="on_key_handler" from="../events/keyboard" />
  <import use="On" from="../events" />
  <base use="BakeryBase" from="../base-classes/main" default />
</s:meta>

<script>
  const modal = CreateRef();
  const body = CreateRef();

  unsafe_import("https://cdn.jsdelivr.net/npm/wicg-inert/dist/inert.min.js");

  let open = false;
  let target = undefined;
  On("click", self.target, (_, a) => {
    target = a;
    open = true;
    self.dispatchEvent(new ShouldRender());
    setTimeout(() => {
      self.dispatchEvent(new ShouldRender());
    }, 5);
  });

  function close() {
    open = false;
  }

  const top = () => {
    const world_top = (target?.offsetTop ?? 0) + (target?.offsetHeight ?? 0);
    const screen_top = world_top - window.scrollY;
    return `calc(${screen_top}px + 0.5rem)`;
  };

  const left = () => {
    const world_left = target?.offsetLeft ?? 0;
    const screen_left = world_left - window.scrollX;
    return `${screen_left}px`;
  };
  const width = () => self.width ?? `${target?.clientWidth ?? 0}px`;
  const height = () => (body.current?.clientHeight ?? 0) + "px";

  self.addEventListener(RenderEvent.Key, () => {
    self.inert = !open;
  });

  window.addEventListener("scroll", () => {
    const target = modal.current;
    if (!target) return;
    target.style.top = top();
    target.style.left = left();
  });

  self.addEventListener(
    "keyup",
    on_key_handler({
      Escape: () => {
        open = false;
        self.dispatchEvent(new ShouldRender());
      },
    })
  );
</script>
<style>
  @js const spec = require("../spec");
  @js const theme = require("../theme");
  @insert ../styles/overlay.pss;
  @insert ../styles/custom-scrollbar.pss;

  @if open {
    @insert ../styles/overlay-open.pss;
  }

  .overlay {
    background-color: transparent;
  }

  .dropdown-container {
    position: fixed;
    top: ":top()";
    left: ":left()";
    width: ":width()";
    height: 0;
    overflow: hidden;
    theme.transition("fast", "height");
    theme.shadow("small");
    theme.border("body", "contrast");
    border-radius: ":spec.borders.body.radius";
    z-index: ":spec.z_indexes.popup";
    max-height: ":self.height";
  }

  .dropdown-container.open {
    height: ":height()";
  }

  .dropdown-body {
    display: flow-root;
    theme.text("body", "no-margin");
    theme.colour("surface");
    box-sizing: border-box;
    width: ":width()";
  }

  .dropdown-body.scrollable {
    overflow-y: auto;
  }

  @insert ../styles/slotted-spans.pss;
</style>

<div class="overlay" on:click="close"></div>
<div class=":c('dropdown-container', ['open', open])" s:ref="modal">
  <div
    class=":c('dropdown-body', ['scrollable', self.scrollable])"
    s:ref="body"
  >
    <slot></slot>
  </div>
</div>
