<s:meta name="f-input">
  A single line text input. Must be placed within a `form` tag.
  <attr name="type" type="keyboard" default="text">
    The keyboard to be used for the input when using a mobile device.
    <ref
      url="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode"
    >
      MDN Reference
    </ref>
  </attr>
  <attr name="prefill" optional>The default text for the textbox.</attr>
  <attr name="disabled" type="boolean">If set then the field is readonly.</attr>
  <attr name="sensitive" type="boolean">
    If set then the form element is hidden from the user. Useful for password
    inputs.
  </attr>
  <attr name="name">
    The name of the value field in the form data. Should be unique.
  </attr>
  <attr name="required" type="boolean">
    If set then the form will not be submittable until the element field has a
    value.
  </attr>
  <attr name="validate" optional>
    A RegExp string used to evaluate the input. If there are no matches then the
    field will be considered invalid and the form will not be submittable.
  </attr>
  <slot>The label text</slot>
  <slot name="help">The small help text at the bottom of the input.</slot>
  <slot name="empty">
    The error text for if the slot is empty and required is true.
  </slot>
  <slot name="invalid">
    The error text for if validate is set and the RegExp does not match
  </slot>
  <base use="FormElement" from="../base-classes/form.ts" default />
  <import use="c" from="../html/classes.ts" default />
  <import use="slotted" from="../toggleable-slot.ts" default />
  <import use="link_css" from="../fetch-resources.ts" />
  <import use="on_key_handler" from="../events/keyboard.ts" />
  <aria role="input" />
  <form />
</s:meta>

<script>
  link_css(
    "https://cdn.rawgit.com/noppa/text-security/master/dist/text-security.css",
    self
  );

  const slot = slotted();
  const textarea = CreateRef();

  self.addEventListener("focus", () => {
    textarea.current.focus();
  });

  self.addEventListener(RenderEvent.Key, () => {
    textarea.current.innerHTML = self.value ?? "";
  });

  self.addEventListener(
    "keydown",
    on_key_handler({
      Enter: () => {
        self.value = textarea.current.innerText.replace(/\n/gm, "");
        self.submit();
      },
    })
  );

  function update_value() {
    self.value = textarea.current.innerText.replace(/\n/gm, "");
  }
</script>
<style>
  @insert ../styles/single-line-input.pss;
</style>

<div class=":self.label_class">
  <span class=":c('label-text', ['populated', self.focused || self.value])">
    <slot></slot>
  </span>
  <div
    class=":c('content', ['sensitive', self.sensitive])"
    contenteditable="plaintext-only"
    s:ref="textarea"
    on:blur="update_value"
    s:vdom="ignore"
    inputmode=":self.type ?? 'text'"
  >
    <s:text use=":self.value ?? ''"></s:text>
  </div>
</div>
<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !slot.has_children])">
    <slot name="help" on:slotchange="slot.on_change"></slot>
  </div>
</s:if>
