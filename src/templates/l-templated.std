<s:meta name="l-templated">
  Insert a generic template into the project. Should only be used with trusted
  data. Any attributes passed in may also be retrieved by the template using
  Mustache, using `props`. These may be computed.
  <attr name="use">
    The HTML ID or URL of the template desired. If a HTML ID then it should
    point to a `template` tag. If a URL then it should point to a HTML file.
    That file should contain no `html` or `body` tags and should only container
    the content as if it was in a `template` tag.
  </attr>
  <attr name="remote" type="boolean">
    If set then the use attribute will be treated as a URL. If not then it will
    be treated as a HTML ID.
  </attr>
  <import use="is_visible" from="../html/is-visible.ts" />
  <base
    use="ContextFetcher"
    from="../base-classes/context-fetcher.ts"
    default
  />
</s:meta>

<style>
  :host {
    display: block;
  }
</style>

<script>
  import { unsafe_import } from "../fetch-resources.ts";
  const cache = {};

  function DecodeHtml(html) {
    var txt = document.createElement("textarea");
    txt.innerHTML = html;
    return txt.value;
}

  async function process_data(template) {
    const rendered = ejs.render(DecodeHtml(template), {
      props: new Proxy( 
        {},
        {
          get: (_, key) => {
            try {
              if (typeof key !== "string") return undefined;
              const checker = self.getAttribute(key);

              if (typeof checker !== "string" || !checker.startsWith(":"))
                return checker;
              const fetcher = new Function(
                "return " + checker.replace(":", "")
              );
              return fetcher.call(self);
            } catch {
              return undefined;
            }
          },
          set: () => {
            throw new Error("Props are immutable");
          },
          defineProperty: () => {
            throw new Error("Props are immutable");
          },
          deleteProperty: () => {
            throw new Error("Props are immutable");
          },
          getOwnPropertyDescriptor(_, key) {
            if (typeof key !== "string") return undefined;
            if (!self.hasAttribute(key)) return undefined;
            return {
              writable: false,
              get: this.get,
              set: this.set,
              configurable: false,
              enumerable: false,
            };
          },
          getPrototypeOf: () => {
            return undefined;
          },
          has: (_, key) => {
            if (typeof key !== "string") return false;
            return !!self.hasAttribute(key);
          },
          isExtensible: () => false,
          ownKeys: () => {
            const result = [];
            for (const attribute of self.attributes) {
              result.push(attribute.name);
            }

            return result;
          },
          setPrototypeOf: () => {
            throw new Error("Props are immutable");
          },
        }
      ),
      self,
    });

    const result = document.createElement("template");
    result.innerHTML = rendered;
    return result;
  }

  async function get_data(use) {
    if (!self.remote) {
      return process_data(document.getElementById(use).innerHTML);
    }

    if (!cache[use]) {
      const response = await fetch(use);
      if (!response.ok) throw response;
      cache[use] = await response.text();
    }

    return process_data(cache[use]);
  }

  let old_remote;
  let old_use;

  $after: {
    await unsafe_import(
      "https://cdn.jsdelivr.net/npm/ejs@3.1.9/ejs.min.js"
    );
    const use = self.use_string_context("use");
    if (!use) return;
    const data = await get_data(use);
    self.root.replaceChildren(data.content);
    self.style.display = "block";
  }
</script>

<d-loading open="true"></d-loading>
