<s:meta name="f-select">
  A dropdown select. Must be placed within a `form` tag.
  <attr name="prefill" optional>The default selected item.</attr>
  <attr name="disabled" type="boolean">If set then the field is readonly.</attr>
  <attr name="name">
    The name of the value field in the form data. Should be unique.
  </attr>
  <attr name="required" type="boolean">
    If set then the form will not be submittable until the element field has a
    value.
  </attr>
  <attr name="validate" optional>
    A RegExp string used to evaluate the input. If there are no matches then the
    field will be considered invalid and the form will not be submittable.
  </attr>
  <event name="ValueChanged" type="SelectValueChangedEvent">
    Fired when the input value is changed. Does not fire if the value changes
    because the `prefill` value changes.
    <key name="Value" type="string | boolean | File | undefined">
      The current value of the form element.
    </key>
  </event>
  <slot>The options for select. Should be an `option` element.</slot>
  <slot name="label">The label for the input</slot>
  <slot name="help">The small help text at the bottom of the input.</slot>
  <slot name="empty">
    The error text for if the slot is empty and required is true.
  </slot>
  <slot name="invalid">
    The error text for if validate is set and the RegExp does not match
  </slot>
  <base use="FormElement" from="../base-classes/form.ts" default />
  <import use="c" from="../html/classes.ts" default />
  <import use="slotted" from="../toggleable-slot.ts" default />
  <import use="options" from="../options.ts" default />
  <import use="on_key_handler" from="../events/keyboard.ts" />
  <aria role="select" />
  <form />
</s:meta>

<script>
  const items = options();
  function current() {
    return items.data.find((o) => o.value === self.value)?.text ?? "\xa0";
  }

  function select(name) {
    return () => {
      self.value = name;
      self.blur();
    };
  }

  const slot = slotted();

  self.addEventListener(
    "keydown",
    on_key_handler({
      ArrowDown: () => {
        const index = items.data.findIndex((o) => o.value === self.value);
        if (!items.data[index + 1]) return;
        self.value = items.data[index + 1].value;
      },
      ArrowUp: () => {
        const index = items.data.findIndex((o) => o.value === self.value);
        if (!items.data[index - 1]) return;
        self.value = items.data[index - 1].value;
      },
    })
  );
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");
  @insert ../styles/single-line-input.pss;
  @insert ../styles/dropdown.pss;

  .item {
    position: relative;
    theme.colour("surface");
    theme.padding("small_block");
    theme.transition("fast", "background-color");
  }

  .item:hover {
    theme.colour("surface", 0.95);
  }

  t-icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 0;
    theme.padding("input", "left", "right");
    theme.transition("fast", "transform");
  }

  @if self.focused {
    .input-content t-icon {
      transform: translateY(-50%) rotate(180deg);
    }
  }

  .dropdown-container.open {
    max-height: 12rem;
  }

  .dropdown-body {
    max-height: 12rem;
    overflow-y: scroll;
  }
</style>

<div style="display: none">
  <slot on:slotchange="items.on_change"></slot>
</div>

<div class=":self.label_class">
  <div class="input-content">
    <div class=":c('label-text', ['populated', self.focused || self.value])">
      <slot name="label"></slot>
    </div>

    <div class="content">
      <s:text use=":current()"></s:text>
    </div>

    <t-icon name="arrow-down-s" size="body_large" text></t-icon>
  </div>

  <div class=":c('dropdown-container', ['open', self.focused])">
    <div class="dropdown-body scrollable">
      <s:for key="item" subject=":items.data">
        <div class="item" on:click="select(item.value)">
          <s:text use=":item.text"></s:text>
          <s:if check=":item.value === self.value">
            <t-icon name="check" text></t-icon>
          </s:if>
        </div>
      </s:for>
    </div>
  </div>
</div>

<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !slot.has_children])">
    <slot name="help" on:slotchange="slot.on_change"></slot>
  </div>
</s:if>
