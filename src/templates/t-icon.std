<meta name="t-icon">
  A icon from RemixIcon to be used to provide richness to a document.
  <ref url="https://remixicon.com/">
    RemixIcon Website
  </ref>
  <attr name="name">
    The name taken from RemixIcon
    <ref url="https://remixicon.com/">
      RemixIcon Website
    </ref>
  </attr>
  <attr name="fill" type="boolean">
    If true then the filled variant of the RemixIcon will be used.
  </attr>
  <attr name="plain" type="boolean">
    Certain icons do not have a fill or outlined variant. Set this to
    true if that is the case for you.
  </attr>
  <attr name="size" default="body">
    A size of one of the text variants from the theme. Use `body`
    and `body_large`for paragraph sizes. Use
    `h{NUMBER}_display` for display headings.
  </attr>
  <attr name="colour" type="colour" default="body">
    The colour of the icon.
  </attr>
  <attr name="text" type="boolean">
    If set to true then the text colour from the
    provided theme colour will be used.
  </attr>
  <attr name="spin" type="boolean">
    If true then the icon will spin. Useful for loading indicators.
  </attr>
  <import use="link_css" from="../fetch-resources.ts" />
  <base use="BakeryBase" from="../base-classes/main.ts" default />
</meta>

<script>
  link_css(
    "https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css",
    self
  );
</script>

<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");

  :host {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  span {
    font-size: ":spec.text_styles[self.props.size ?? 'body'].font_size";
    background-color: transparent !important;
    vertical-align: middle;
    line-height: 1;
  }

  @if self.props.spin {
    @keyframes spin {
      from {
        transform: rotate(0deg);
      }

      to {
        transform: rotate(360deg);
      }
    }

    span::before {
      display: inline-block;
      theme.animation("spin", "slow", "infinite");
    }
  }

  @if self.props.text {
    span {
      theme.colour(self.props.colour ?? "surface");
    }
  }

  @if !self.props.text {
    span {
      theme.textcolour(self.props.colour ?? "surface");
    }
  }
</style>

<span
  class=":`ri-${self.props.name}${self.props.plain ? '' : self.props.fill ? '-fill' : '-line'}`"
></span>
