<script>
  import { ShouldRender, PropsEvent } from "../deps.ts";
  import { Provider } from "../data.ts";

  export const name = "u-fetch";
  export const props = ["url", "key", "fallback", "overlay"];

  function Language() {
    if (navigator.languages != undefined) return navigator.languages[0];
    return navigator.language;
  }

  const provider = new Provider(self, self.props.key);

  let loading = true;

  async function get_data() {
    loading = true;
    self.dispatchEvent(new ShouldRender());
    const r = await fetch(self.props.url.replace("{locale}", Language()));
    let final;

    if (!r.ok)
      if (self.props.fallback) {
        console.error(r);
        const res = await fetch(
          self.props.fallback.replace("{locale}", Language())
        );

        if (!res.ok) throw res;

        final = await res.json();
      } else throw r;
    else final = await r.json();

    loading = false;
    self.dispatchEvent(new ShouldRender());
    provider.data = final;
  }

  get_data();

  self.addEventListener(PropsEvent.Key, (e) => {
    if (e.Key === "key")
      console.warn("Changing keys for providers is current not supported.");
    get_data();
  });
</script>
<s:if check=":!loading">
  <slot></slot>
</s:if>
<s:if check=":loading && !self.props.overlay">
  <slot name="loading"></slot>
</s:if>

<d-loading
  open=":(loading && !self.props.overlay) ? 'true' : 'false'"
></d-loading>
