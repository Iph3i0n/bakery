<s:meta name="f-richtext">
  A multi line rich text input form element. Must be placed within a `form` tag.
  To properly support images, it is recommended to listen for `ImageAdded`
  events. Setting the `URL` property on the event to the promise of a string or
  a string itself will set the URL of the image to that. If this is not present
  then a Data URL will be generated.
  <attr name="type" type="keyboard" default="text">
    The keyboard to be used for the input when using a mobile device.
    <ref
      url="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode"
    >
      MDN Reference
    </ref>
  </attr>
  <attr name="prefill" optional>The default selected item.</attr>
  <attr name="disabled" type="boolean">If set then the field is readonly.</attr>
  <attr name="name">
    The name of the value field in the form data. Should be unique.
  </attr>
  <attr name="required" type="boolean">
    If set then the form will not be submittable until the element field has a
    value.
  </attr>
  <attr name="validate" optional>
    A RegExp string used to evaluate the input. If there are no matches then the
    field will be considered invalid and the form will not be submittable.
  </attr>
  <event name="ValueChanged" type="RichTextValueChangedEvent">
    Fired when the input value is changed. Does not fire if the value changes
    because the `prefill` value changes.
    <key name="Value" type="string | boolean | File | File[] | undefined">
      The current value of the form element.
    </key>
    <key name="Name" type="string">The name of the input.</key>
  </event>
  <event name="ImageAdded" type="ImageAddedEvent">
    Fired when the user uploads an iamge. If the URL property is set to a
    promise of a string then that will be used to set the URL. If not then a
    data URL will be generated.
    <key name="URL" type="Promise<string> | string } undefined">
      The promise of the data URL of the image. A data URL will be generated if
      this is not set.
    </key>
    <key name="File" type="File">The file that has been uploaded.</key>
  </event>
  <slot>The label text</slot>
  <slot name="help">The small help text at the bottom of the input.</slot>
  <slot name="empty">
    The error text for if the slot is empty and required is true.
  </slot>
  <slot name="invalid">
    The error text for if validate is set and the RegExp does not match
  </slot>
  <base use="RichText" from="../base-classes/rich-text.ts" default />
  <import use="c" from="../html/classes.ts" default />
  <import use="slotted" from="../toggleable-slot.ts" default />
  <import use="unsafe_import" from="../fetch-resources.ts" />
  <import use="link_css" from="../fetch-resources.ts" />
  <import use="on_key_handler" from="../events/keyboard.ts" />
  <aria role="input" />
  <form />
</s:meta>

<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");
  @insert ../styles/input.pss;
  @insert ../styles/richtext.pss;

  :host {
    position: relative;
  }

  .textarea-label {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    theme.padding("small_block");
    theme.colour("body");
    theme.text("body", "no-margin");
    theme.border("body", "contrast", "bottom");
    border-top-left-radius: ":spec.borders.body.radius";
    border-top-right-radius: ":spec.borders.body.radius";
  }

  .editor-buttons {
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }

  .content {
    min-height: 6rem;
    theme.text("body", "no-margin");
    theme.padding("small_block", "left", "right");
    theme.margin("small_block", "top", "bottom");
  }

  span:not(.caret) {
    animation-play-state: paused;
  }

  .textarea-label .spacer { flex: 1; }

  button {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    theme.border("small");
    theme.colour("surface");
    width: 2em;
    height: 2em;
    theme.margin("badge", "left", "right");
    theme.transition("fast", "color", "background-color");
  }

  .textarea-label button.selected {
    theme.colour("body");
  }

  .textarea-label button:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  .textarea-label select {
    background: url("data:image/svg+xml,<svg height='10px' width='10px' viewBox='0 0 16 16' fill='%23000000' xmlns='http://www.w3.org/2000/svg'><path d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/></svg>") no-repeat;
    background-position: calc(100% - 0.75rem) center !important;
    -moz-appearance:none !important;
    -webkit-appearance: none !important;
    appearance: none !important;

    cursor: pointer;
    theme.padding("super_small");
    padding-right: 2rem;
    theme.margin("badge", "left", "right");
    theme.border("small");
    theme.text("small", "no-margin");
    theme.colour("surface");
    height: 2em;
    theme.transition("fast", "color", "background-color");
  }

  .textarea-label select:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  .content:focus {
    outline: none;
  }

  .link-editor {
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  .link-editor input {
    flex: 1;
    theme.text("small", "no-margin");
    theme.padding("super_small");
    theme.colour("surface");
    theme.border("small");
    margin: 0;
  }

  .textarea-label select:focus,
  .link-editor input:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  @if self.CurrentAnchor {
    .input-name {
      display: none;
    }
  }

  @if !self.CurrentAnchor {
    .link-editor {
      display: none;
    }
  }

  @if self.use_breakpoint(600, "px", self, true) {
    .textarea-label {
      display: block;
    }

    .editor-buttons {
      margin-top: 0.5rem;
      flex-wrap: wrap;
      justify-content: flex-start;
    }

    .textarea-label select,
    .textarea-label button {
      margin-bottom: 0.5rem;
    }
  }
</style>

<div class=":self.label_class">
  <div class="textarea-label">
    <div class="input-name">
      <slot></slot>
    </div>
    <div class="link-editor">
      <input
        type="url"
        s:ref="self.LinkInputRef"
        on:input="() => self.Urlify()"
      />

      <button type="button" on:click="() => self.Unlinkify()">
        <t-icon
          name="link-unlink"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>
    </div>
    <div class="spacer"></div>

    <div class="editor-buttons">
      <select
        on:change="() => self.Stylify()"
        s:ref="self.SelectorRef"
        tabindex="0"
      >
        <s:for subject=":self.FormatOptions" key="format">
          <s:if check=":self.Format === format.value">
            <option value=":format.value" selected>
              <slot name=":'format-' + format.value">
                <s:text use=":format.title"></s:text>
              </slot>
            </option>
          </s:if>
          <s:if check=":self.Format !== format.value">
            <option value=":format.value">
              <slot name=":'format-' + format.value">
                <s:text use=":format.title"></s:text>
              </slot>
            </option>
          </s:if>
        </s:for>
      </select>

      <button
        class=":c(['selected', self.IsBold])"
        type="button"
        on:click="() => self.Boldify()"
      >
        <t-icon name="bold" colour="surface" size="body" plain text></t-icon>
      </button>

      <button
        class=":c(['selected', self.IsItalic])"
        type="button"
        on:click="() => self.Italicify()"
      >
        <t-icon name="italic" colour="surface" size="body" plain text></t-icon>
      </button>

      <button
        class=":c(['selected', self.IsUnderlined])"
        type="button"
        on:click="() => self.Underlinify()"
      >
        <t-icon
          name="underline"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>

      <button
        class=":c(['selected', self.IsStrikethrough])"
        type="button"
        on:click="() => self.Strikethroughify()"
      >
        <t-icon
          name="strikethrough"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>

      <button type="button" on:click="() => self.Ulify()">
        <t-icon
          name="list-unordered"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>

      <button type="button" on:click="() => self.Olify()">
        <t-icon
          name="list-ordered"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>

      <button type="button" on:click="() => self.Linkify()">
        <t-icon name="link" colour="surface" size="body" plain text></t-icon>
      </button>

      <button type="button" on:click="() => self.Image()">
        <t-icon name="image" colour="surface" size="body" text></t-icon>
      </button>
    </div>
  </div>
  <div class="content" s:ref="self.EditorRef" contenteditable="true"></div>
</div>

<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !self.Slot.has_children])">
    <slot name="help" on:slotchange="self.Slot.on_change"></slot>
  </div>
</s:if>
