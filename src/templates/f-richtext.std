<script>
  import "../selection-polyfill.js";
  import RichText from "../rich-text.ts";
  import c from "../classes.ts";
  import slotted from "../toggleable-slot.ts";
  import { unsafe_import, link_css } from "../fetch-resources.ts";

  export const name = "f-richtext";
  export const props = {
    default: "",
    disabled: false,
    name: undefined,
    type: "text",
    required: false,
    validate: undefined,
  };
  export const base = RichText;
  export const form = true;
  export const aria = { Role: "input" };
</script>
<style>
  @js const theme = require("../theme.ts");
  @js const spec = require("../spec.ts");
  @insert ../styles/input.pss;
  @insert ../styles/richtext.pss;

  :host {
    position: relative;
  }

  .textarea-label {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    theme.padding("small_block");
    theme.colour("body");
    theme.text("body", "no-margin");
    theme.border("body", "contrast", "bottom");
    border-top-left-radius: ":spec.borders.body.radius";
    border-top-right-radius: ":spec.borders.body.radius";
  }

  .content {
    min-height: 6rem;
    theme.text("body", "no-margin");
    theme.padding("small_block");
    white-space: pre;
  }

  span:not(.caret) {
    animation-play-state: paused;
  }

  .textarea-label .spacer { flex: 1; }

  button {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    theme.border("small");
    theme.colour("surface");
    width: 2em;
    height: 2em;
    theme.margin("badge", "left", "right");
    theme.transition("fast", "color", "background-color");
  }

  .textarea-label button.selected {
    theme.colour("body");
  }

  .textarea-label button:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  .textarea-label select {
    background: url("data:image/svg+xml,<svg height='10px' width='10px' viewBox='0 0 16 16' fill='%23000000' xmlns='http://www.w3.org/2000/svg'><path d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/></svg>") no-repeat;
    background-position: calc(100% - 0.75rem) center !important;
    -moz-appearance:none !important;
    -webkit-appearance: none !important;
    appearance: none !important;

    cursor: pointer;
    theme.padding("super_small");
    padding-right: 2rem;
    theme.margin("badge", "left", "right");
    theme.border("small");
    theme.text("small", "no-margin");
    theme.colour("surface");
    height: 2em;
    theme.transition("fast", "color", "background-color");
  }

  .textarea-label select:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  .content:focus {
    outline: none;
  }

  .link-editor {
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  .link-editor input {
    flex: 1;
    theme.text("small", "no-margin");
    theme.padding("super_small");
    theme.colour("surface");
    theme.border("small");
    margin: 0;
  }

  .textarea-label select:focus,
  .link-editor input:focus {
    outline: none;
    theme.colour("surface", 0.9);
  }

  @if self.CurrentAnchor {
    .input-name {
      display: none;
    }
  }

  @if !self.CurrentAnchor {
    .link-editor {
      display: none;
    }
  }
</style>

<div class=":self.label_class">
  <div class="textarea-label">
    <div class="input-name">
      <slot></slot>
    </div>
    <div class="link-editor">
      <input
        type="url"
        s:ref="self.LinkInputRef"
        on:input="() => self.Urlify()"
      />

      <button type="button" on:click="() => self.Unlinkify()">
        <t-icon
          name="link-unlink"
          colour="surface"
          size="body"
          plain
          text
        ></t-icon>
      </button>
    </div>
    <div class="spacer"></div>

    <select on:change="() => self.Stylify()" s:ref="self.SelectorRef">
      <s:for subject=":self.FormatOptions" key="format">
        <s:if check=":self.Format === format.value">
          <option value=":format.value" selected>
            <slot name=":'format-' + format.value">
              <s:text use=":format.title"></s:text>
            </slot>
          </option>
        </s:if>
        <s:if check=":self.Format !== format.value">
          <option value=":format.value">
            <slot name=":'format-' + format.value">
              <s:text use=":format.title"></s:text>
            </slot>
          </option>
        </s:if>
      </s:for>
    </select>

    <button
      class=":c(['selected', self.IsBold])"
      type="button"
      on:click="() => self.Boldify()"
    >
      <t-icon name="bold" colour="surface" size="body" plain text></t-icon>
    </button>

    <button
      class=":c(['selected', self.IsItalic])"
      type="button"
      on:click="() => self.Italicify()"
    >
      <t-icon name="italic" colour="surface" size="body" plain text></t-icon>
    </button>

    <button
      class=":c(['selected', self.IsUnderlined])"
      type="button"
      on:click="() => self.Underlinify()"
    >
      <t-icon name="underline" colour="surface" size="body" plain text></t-icon>
    </button>

    <button
      class=":c(['selected', self.IsStrikethrough])"
      type="button"
      on:click="() => self.Strikethroughify()"
    >
      <t-icon
        name="strikethrough"
        colour="surface"
        size="body"
        plain
        text
      ></t-icon>
    </button>

    <button type="button" on:click="() => self.Ulify()">
      <t-icon
        name="list-unordered"
        colour="surface"
        size="body"
        plain
        text
      ></t-icon>
    </button>

    <button type="button" on:click="() => self.Olify()">
      <t-icon
        name="list-ordered"
        colour="surface"
        size="body"
        plain
        text
      ></t-icon>
    </button>

    <button type="button" on:click="() => self.Linkify()">
      <t-icon name="link" colour="surface" size="body" plain text></t-icon>
    </button>
  </div>
  <div class="content" s:ref="self.EditorRef" contenteditable="true"></div>
</div>

<s:if check=":self.should_show_validation">
  <s:if check=":self.is_bad_empty">
    <div class="error-text">
      <slot name="empty"></slot>
    </div>
  </s:if>
  <s:if check=":!self.is_bad_empty && self.is_invalid">
    <div class="error-text">
      <slot name="invalid"></slot>
    </div>
  </s:if>
</s:if>
<s:if check=":!self.should_show_validation">
  <div class=":c('help-text', ['empty', !self.Slot.has_children])">
    <slot name="help" on:slotchange="self.Slot.on_change"></slot>
  </div>
</s:if>
